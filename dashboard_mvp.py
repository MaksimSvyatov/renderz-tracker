# dashboard_streamlit_simple.py
import streamlit as st
import pandas as pd
import os
import csv
from datetime import datetime, timedelta
import logging

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DATA_DIR = "data"
DAYS_HISTORY = 30
PLAYERS_TO_SHOW = ["Pervis Estupi√±√°n 103", "Sander Berge 102"]

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- –§—É–Ω–∫—Ü–∏–∏ ---

@st.cache_data(ttl=3600) # –ö—ç—à –Ω–∞ —á–∞—Å
def load_player_data_last_days(player_name, days_back=DAYS_HISTORY):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏–∑ CSV –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π."""
    logging.info(f"–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• (–∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∫—ç—à–∞) –¥–ª—è {player_name}...")
    safe_name = player_name.replace(" ", "_").replace("/", "_").replace("\\", "_")
    filename = os.path.join(DATA_DIR, f"{safe_name}.csv")
    if not os.path.isfile(filename):
        logging.warning(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
        return pd.DataFrame()

    rows = []
    try:
        with open(filename, "r", encoding="utf-8") as f:
            first_line = f.readline(); has_header = "–î–∞—Ç–∞" in first_line and "–¶–µ–Ω–∞" in first_line; f.seek(0)
            reader = csv.DictReader(f) if has_header else csv.reader(f)
            if not has_header: logging.warning(f"[load_data] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–∞–π–ª–µ {filename}.")
            for i, row_data in enumerate(reader):
                try:
                    if isinstance(row_data, dict):
                        dt_str, tm_str, price_str = row_data.get("–î–∞—Ç–∞", ""), row_data.get("–í—Ä–µ–º—è", ""), row_data.get("–¶–µ–Ω–∞", "")
                    elif isinstance(row_data, list) and len(row_data) >= 3:
                        dt_str, tm_str, price_str = row_data[0], row_data[1], row_data[2]
                    else: continue
                    if not dt_str or not tm_str or not price_str: continue
                    dt_obj = datetime.strptime(f"{dt_str} {tm_str}", "%Y-%m-%d %H:%M:%S")
                    price = float(price_str.replace(',','').replace(' ',''))
                    rows.append({"datetime": dt_obj, "price": price})
                except (ValueError, TypeError) as ve: logging.warning(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ {filename} —Å—Ç—Ä–æ–∫–∞ ~{i+1}: {row_data} -> {ve}")
                except Exception as ep: logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –≤ {filename}: {row_data} -> {ep}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {player_name}")
        return pd.DataFrame()

    if not rows: return pd.DataFrame()

    df = pd.DataFrame(rows)
    df = df.sort_values("datetime", ascending=True)
    df = df.drop_duplicates(subset=['datetime'], keep='last')
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º datetime –∫–∞–∫ –∏–Ω–¥–µ–∫—Å –¥–ª—è st.line_chart ---
    df = df.set_index("datetime")
    # ---

    cutoff_time = datetime.now() - timedelta(days=days_back)
    df = df[df.index >= cutoff_time] # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–Ω–¥–µ–∫—Å—É

    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {player_name} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π")
    return df # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame —Å datetime –∏–Ω–¥–µ–∫—Å–æ–º

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit ---

st.set_page_config(layout="wide")
st.title(f"üìä –î–∞—à–±–æ—Ä–¥ —Ü–µ–Ω –∏–≥—Ä–æ–∫–æ–≤ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {DAYS_HISTORY} –¥–Ω–µ–π)")
st.caption(f"–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

# –ö–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é"):
    st.cache_data.clear()
    st.rerun()

col1, col2 = st.columns(2)

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ---
with col1:
    player1 = PLAYERS_TO_SHOW[0]
    st.subheader(f"{player1}")
    df1 = load_player_data_last_days(player1, days_back=DAYS_HISTORY)
    if df1.empty or 'price' not in df1.columns:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {player1}.")
    else:
        # --- –ò–°–ü–û–õ–¨–ó–£–ï–ú st.line_chart ---
        st.line_chart(df1['price'])
        # ---
        if not df1.empty:
            last_price1 = df1['price'].iloc[-1]
            st.metric(label="–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞", value=f"{last_price1:,.0f}".replace(",", " "))
        else:
            st.metric(label="–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞", value="N/A")

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ---
with col2:
    player2 = PLAYERS_TO_SHOW[1]
    st.subheader(f"{player2}")
    df2 = load_player_data_last_days(player2, days_back=DAYS_HISTORY)
    if df2.empty or 'price' not in df2.columns:
        st.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {player2}.")
    else:
        # --- –ò–°–ü–û–õ–¨–ó–£–ï–ú st.line_chart ---
        st.line_chart(df2['price'])
        # ---
        if not df2.empty:
            last_price2 = df2['price'].iloc[-1]
            st.metric(label="–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞", value=f"{last_price2:,.0f}".replace(",", " "))
        else:
            st.metric(label="–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞", value="N/A")